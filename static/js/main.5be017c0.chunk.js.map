{"version":3,"sources":["utils/Constants.ts","utils/Tile.ts","utils/BoardUtils.ts","state/Atoms.ts","components/BoardTile.tsx","components/GameBoard.tsx","components/GameHeader.tsx","utils/Types.ts","utils/Board.ts","components/GameStatus.tsx","logo.svg","components/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ThemeType","id","getInitialTile","Tile","undefined","tile","value","curRow","curCol","prevRow","prevCol","combined","new","attr","clear","reset","i","j","setCurrentPosition","notNew","setNew","this","Math","random","BESTSCORE","GAMESTATE","DEFAULT_GAMEBOARD","CHOICE_ARR","CHOICE_ARR_LEN","length","THEME","confettiConfig","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","width","height","colors","flipGrid","grid","map","r","reverse","transposeGrid","newGrid","cloneDeep","isGameWon","board","isGameOver","ThemeState","atom","key","default","localStorage","getItem","LIGHT","DARK","BoardTile","theme","useRecoilValue","colorClass","rValue","TWO","FOUR","EIGHT","SIXTEEN","THIRYTWO","SIXTYFOUR","ONETWENTYEIGHT","TWOFIFTYSIX","FIVETWELVE","TENTWENTYFOUR","TWENTYFORTYEIGHT","getColorId","newClass","combinedClass","className","GameBoard","gameboard","startGame","updateScore","setGameboard","arrowKeyChecker","e","code","preventDefault","move","useEffect","document","addEventListener","removeEventListener","score","lose","setLose","row","rIdx","cIdx","GameHeader","scores","handleStartGame","removeBestScore","onClick","bestScore","initialScores","Board","prevBoard","win","started","moved","isMoving","addNewValue","valIdx","floor","insertPointX","insertPointY","init","setWin","operate","slide","combine","arr","filter","val","missing","zeros","Array","fill","concat","a","b","direction","flipped","rotated","played","compare","t","GameStatus","keepGoing","renderForLose","useState","gameWon","setGameWon","title","btnText","setTimeout","active","config","Settings","version","packJson","useRecoilState","setTheme","anchorEl","setAnchorEl","isCacheClear","setIsCacheClear","cacheClearText","setItem","removeLocalStorage","removeItem","setSelectedTheme","target","size","currentTarget","Popover","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Divider","FormControl","NativeSelect","onChange","Object","values","type","idx","src","logo","App","storedBoard","JSON","parse","setStartGame","bs","setScores","swipeHandlers","useSwipeable","onSwipedLeft","onSwipedUp","onSwipedRight","onSwipedDown","useSwipeHandlers","setTileSizeOnResize","getElementById","tileWidth","offsetWidth","tileHeight","offsetHeight","documentElement","style","setProperty","window","stringify","updateScores","parseInt","toString","confirm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5be017c0.chunk.js","sourcesContent":["import { ConfettiConfig } from 'react-dom-confetti'\nimport { getInitialTile } from './Tile'\nimport { tBoard } from './Types'\n/**\n * CONSTANTS and Enums\n */\n\n// localstorage keys\nexport const BESTSCORE = 'bestScore'\nexport const GAMESTATE = 'gameState'\n\n// initial gameboard\nexport const DEFAULT_GAMEBOARD: tBoard = [\n  [getInitialTile(), getInitialTile(), getInitialTile(), getInitialTile()],\n  [getInitialTile(), getInitialTile(), getInitialTile(), getInitialTile()],\n  [getInitialTile(), getInitialTile(), getInitialTile(), getInitialTile()],\n  [getInitialTile(), getInitialTile(), getInitialTile(), getInitialTile()],\n]\n\n// choice array is for randomizing where a new value will appear after a move is made\nexport const CHOICE_ARR: Array<number> = [\n  2, 4, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2,\n]\nexport const CHOICE_ARR_LEN = CHOICE_ARR.length\nexport const DEFAULT_ROW_LEN = 4\nexport const THEME = 'theme'\n\nexport enum ThemeType {\n  DARK = 'dark',\n  LIGHT = 'light',\n}\n\nexport enum id {\n  TWO = 'two',\n  FOUR = 'four',\n  EIGHT = 'eight',\n  SIXTEEN = 'sixteen',\n  THIRYTWO = 'thirty-two',\n  SIXTYFOUR = 'sixty-four',\n  ONETWENTYEIGHT = 'one-twenty-eight',\n  TWOFIFTYSIX = 'two-fifty-six',\n  FIVETWELVE = 'five-twelve',\n  TENTWENTYFOUR = 'ten-twenty-four',\n  TWENTYFORTYEIGHT = 'twenty-fourty-eight',\n}\n\n// gameWon confetti config\nexport const confettiConfig: ConfettiConfig = {\n  angle: 90,\n  spread: 360,\n  startVelocity: 70,\n  elementCount: 550,\n  dragFriction: 0.12,\n  duration: 4500,\n  stagger: 0.3,\n  width: '12px',\n  height: '12px',\n  colors: ['#a864fd', '#29cdff', '#78ff44', '#ff718d', '#fdff6a'],\n}\n","export const getInitialTile = (): Tile => new Tile(undefined)\n\nexport class Tile {\n  id: number\n  value: number\n  curRow: number\n  curCol: number\n  prevRow: number\n  prevCol: number\n  combined: boolean\n  new: boolean\n  attr: string\n\n  constructor(tile: Tile | undefined) {\n    if (tile) {\n      this.id = tile.id\n      this.value = tile.value\n      this.curRow = tile.curRow\n      this.curCol = tile.curCol\n      this.prevRow = tile.prevRow\n      this.prevCol = tile.prevCol\n      this.combined = tile.combined\n      this.new = tile.new\n      this.attr = tile.attr\n      return\n    }\n\n    this.id = Math.random()\n    this.value = 0\n    this.curRow = -1\n    this.curCol = -1\n    this.prevRow = -1\n    this.prevCol = -1\n    this.combined = false\n    this.new = false\n    this.attr = ''\n  }\n\n  clear = (): this => {\n    this.value = 0\n    this.curRow = -1\n    this.curCol = -1\n    this.prevRow = -1\n    this.prevCol = -1\n    this.new = true\n    return this\n  }\n\n  reset = (i: number, j: number): this => {\n    this.prevCol = j\n    this.prevRow = i\n    this.curRow = i\n    this.curCol = j\n    this.new = false\n    this.combined = false\n    return this\n  }\n\n  setCurrentPosition = (i: number, j: number): this => {\n    this.curRow = i\n    this.curCol = j\n    return this\n  }\n\n  notNew = (): this => {\n    this.new = false\n    return this\n  }\n\n  setNew = (): this => {\n    this.new = true\n    return this\n  }\n}\n","import { tBoard } from './Types'\nimport { cloneDeep } from 'lodash'\nimport { DEFAULT_GAMEBOARD, id } from './Constants'\n\nexport const compare = (a: tBoard, b: tBoard): boolean => {\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (a[i][j].value !== b[i][j].value) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nexport const flipGrid = (grid: tBoard): tBoard => {\n  return grid.map((r) => r.reverse())\n}\n\nexport const transposeGrid = (grid: tBoard): tBoard => {\n  // prefers const error\n  // eslint-disable-next-line\n  let newGrid = cloneDeep(DEFAULT_GAMEBOARD);\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      newGrid[i][j] = grid[j][i]\n    }\n  }\n  return newGrid\n}\n\nexport const isGameWon = (board: tBoard): boolean => {\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (board[i][j].value === 2048) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nexport const isGameOver = (board: tBoard): boolean => {\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (board[i][j].value === 0) {\n        return false\n      }\n      if (i !== 3 && board[i][j].value === board[i + 1][j].value) {\n        return false\n      }\n      if (j !== 3 && board[i][j].value === board[i][j + 1].value) {\n        return false\n      }\n      if (i !== 0 && board[i][j].value === board[i - 1][j].value) {\n        return false\n      }\n      if (j !== 0 && board[i][j].value === board[i][j - 1].value) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nexport const getColorId = (rValue: number): string => {\n  switch (rValue) {\n    case 0:\n      return ''\n    case 2:\n      return id.TWO\n    case 4:\n      return id.FOUR\n    case 8:\n      return id.EIGHT\n    case 16:\n      return id.SIXTEEN\n    case 32:\n      return id.THIRYTWO\n    case 64:\n      return id.SIXTYFOUR\n    case 128:\n      return id.ONETWENTYEIGHT\n    case 256:\n      return id.TWOFIFTYSIX\n    case 512:\n      return id.FIVETWELVE\n    case 1024:\n      return id.TENTWENTYFOUR\n    case 2048:\n    default:\n      return id.TWENTYFORTYEIGHT\n  }\n}\n","import { THEME, ThemeType } from '../utils/Constants'\nimport { atom } from 'recoil'\n\nexport const getTheme = (): ThemeType => {\n  const t = localStorage.getItem(THEME)\n  return t === ThemeType.LIGHT ? ThemeType.LIGHT : ThemeType.DARK\n}\n\nexport const ThemeState = atom({\n  key: 'theme',\n  default: getTheme(),\n})\n","import React from 'react'\nimport { useRecoilValue } from 'recoil'\nimport { ThemeState } from '../state/Atoms'\nimport { getColorId } from '../utils/BoardUtils'\nimport '../styles/TileAnimations.scss'\nimport { Tile } from '../utils/Tile'\n\ninterface BoardTileProps {\n  tile: Tile\n}\n\nconst BoardTile: React.FC<BoardTileProps> = ({ tile }) => {\n  const theme = useRecoilValue(ThemeState)\n  const colorClass = getColorId(tile.value)\n  const newClass = tile.value !== 0 && tile.new ? 'new' : ''\n  const combinedClass = tile.combined ? 'combined' : ''\n\n  return (\n    <>\n      <div\n        key={`${tile.id}`}\n        id={`${colorClass ? `${colorClass}-${theme}` : 'board-tile'}`}\n        className={`board-tile board-tile-${theme} ${newClass} ${combinedClass} ${tile.attr} `}\n      >\n        <div className={`board-value `}>\n          {tile.value !== 0 ? tile.value : ''}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default BoardTile\n","import React, { useEffect } from 'react'\nimport '../styles/GameBoard.scss'\nimport { Board } from '../utils/Board'\nimport { isGameOver } from '../utils/BoardUtils'\nimport { useRecoilValue } from 'recoil'\nimport { ThemeState } from '../state/Atoms'\nimport '../styles/DarkTileStyles.scss'\nimport '../styles/LightTileStyles.scss'\nimport BoardTile from './BoardTile'\n\ninterface GameBoardProps {\n  gameboard: Board\n  startGame: boolean\n  updateScore: (score: number) => void\n  setGameboard: React.Dispatch<React.SetStateAction<Board>>\n}\n\nconst GameBoard: React.FC<GameBoardProps> = ({\n  gameboard,\n  startGame,\n  updateScore,\n  setGameboard,\n}) => {\n  const theme = useRecoilValue(ThemeState)\n\n  const arrowKeyChecker = (e: KeyboardEvent): void => {\n    // block keypresses except refresh\n    if (e.code !== 'KeyR') {\n      e.preventDefault()\n    }\n\n    switch (e.code) {\n      case 'ArrowLeft':\n        setGameboard({ ...gameboard.move('left') })\n        break\n      case 'ArrowUp':\n        setGameboard({ ...gameboard.move('up') })\n        break\n      case 'ArrowRight':\n        setGameboard({ ...gameboard.move('right') })\n        break\n      case 'ArrowDown':\n        setGameboard({ ...gameboard.move('down') })\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (startGame === true) {\n      document.addEventListener('keydown', arrowKeyChecker)\n    }\n\n    return (): void => {\n      document.removeEventListener('keydown', arrowKeyChecker)\n    }\n    // eslint-disable-next-line\n  }, [startGame])\n\n  useEffect(() => {\n    const { board, score } = gameboard\n    if (gameboard.lose) {\n      return\n    }\n\n    if (score !== 0) {\n      updateScore(gameboard.score)\n    }\n\n    if (isGameOver(board)) {\n      setGameboard({ ...gameboard.setLose() })\n    }\n\n    // eslint-disable-next-line\n  }, [gameboard, gameboard.board, gameboard.score])\n\n  return (\n    <>\n      <div className={`gameboard-board gameboard-board-${theme}`}>\n        {gameboard?.board?.map((row, rIdx) => (\n          <div key={`${rIdx}-${Math.random()}`} className=\"gameboard-board-row\">\n            {row.map((r, cIdx) => {\n              return (\n                <div\n                  key={`${cIdx}-${Math.random()}`}\n                  className={`underlay underlay-${theme}`}\n                >\n                  <BoardTile tile={r} />\n                </div>\n              )\n            })}\n          </div>\n        ))}\n      </div>\n      <p className=\"instruction-text\">\n        <i>Use the arrow keys to combine tiles and get to 2048!</i>\n      </p>\n    </>\n  )\n}\n\nexport default GameBoard\n","import React from 'react'\nimport { IScores } from '../utils/Types'\nimport { useRecoilValue } from 'recoil'\nimport { ThemeState } from '../state/Atoms'\nimport '../styles/GameHeader.scss'\n\ninterface GameHeaderProps {\n  scores: IScores\n  startGame: boolean\n  handleStartGame: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n  removeBestScore: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n}\n\nconst GameHeader: React.FC<GameHeaderProps> = ({\n  scores,\n  startGame,\n  handleStartGame,\n  removeBestScore,\n}) => {\n  const theme = useRecoilValue(ThemeState)\n\n  return (\n    <div className=\"gameboard-header\">\n      <div className={`gameboard-header-c1 gameboard-header-c1-${theme}`}>\n        <h1>Twenty</h1>\n        <h1>Forty</h1>\n        <h1>Eight</h1>\n      </div>\n\n      <div className=\"gameboard-header-c2\">\n        <div className={`score score-${theme}`}>\n          <h4> Score </h4>\n          <h2>{scores.score}</h2>\n        </div>\n        <div className={`new-game new-game-${theme}`} onClick={handleStartGame}>\n          <span className={`span-${theme}`}>\n            {startGame ? 'Restart' : 'New Game'}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"gameboard-header-c3\">\n        <div className={`best-score best-score-${theme}`}>\n          <h4> Best Score</h4>\n          <h2>{scores.bestScore}</h2>\n        </div>\n        <div className={`clear clear-${theme}`} onClick={removeBestScore}>\n          <span className={`span-${theme}`}>Clear</span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default GameHeader\n","import { Tile } from './Tile'\n/**\n * Interfaces and Type declarations\n */\n\nexport type tBoard = Array<Array<Tile>>\nexport type tRow = Array<Tile>\nexport type direction = 'left' | 'right' | 'up' | 'down' | 'noop'\n\nexport interface IScores {\n  score: number\n  bestScore: string\n}\n\nexport const initialScores: IScores = {\n  score: 0,\n  bestScore: '0',\n}\n","import { cloneDeep } from 'lodash'\nimport { transposeGrid, flipGrid, compare } from './BoardUtils'\nimport {\n  CHOICE_ARR,\n  CHOICE_ARR_LEN,\n  DEFAULT_GAMEBOARD,\n  DEFAULT_ROW_LEN,\n} from './Constants'\nimport { Tile } from './Tile'\nimport { direction, tBoard, tRow } from './Types'\n\nexport class Board {\n  board: tBoard\n  prevBoard: tBoard\n  score: number\n  win: boolean\n  lose: boolean\n  started: boolean\n  moved: direction\n  isMoving: boolean\n\n  constructor(board: Board | undefined) {\n    if (board) {\n      /* eslint-disable */\n      this.board = board.board.map(r => r.map(t => t = new Tile(t)))\n      this.prevBoard = board.prevBoard.map(r => r.map(t => t = new Tile(t)))\n      /* eslint-enable */\n      this.score = board.score\n      this.win = board.win\n      this.lose = board.lose\n      this.started = board.started\n      this.moved = board.moved\n      this.isMoving = board.isMoving\n      return\n    }\n    this.board = [...DEFAULT_GAMEBOARD]\n    this.prevBoard = [...DEFAULT_GAMEBOARD]\n    this.score = 0\n    this.win = false\n    this.lose = false\n    this.started = false\n    this.moved = 'noop'\n    this.isMoving = false\n  }\n\n  addNewValue = (): void => {\n    const valIdx = Math.floor(Math.random() * CHOICE_ARR_LEN)\n    const insertPointX = Math.floor(Math.random() * DEFAULT_ROW_LEN)\n    const insertPointY = Math.floor(Math.random() * DEFAULT_ROW_LEN)\n\n    if (this.board[insertPointX][insertPointY].value === 0) {\n      this.board[insertPointX][insertPointY].value = CHOICE_ARR[valIdx]\n      this.board[insertPointX][insertPointY].setNew()\n    } else {\n      this.addNewValue()\n    }\n  }\n\n  init = (): this => {\n    this.started = true\n    this.addNewValue()\n    return this\n  }\n\n  clear = (): this => {\n    this.board = this.board.map((r) => r.map(() => new Tile(undefined)))\n    this.score = 0\n    this.win = false\n    this.lose = false\n    return this.init()\n  }\n\n  setWin = (): this => {\n    this.win = true\n    return this\n  }\n\n  setLose = (): this => {\n    this.lose = true\n    return this\n  }\n\n  operate = (row: tRow): tRow => {\n    row = this.slide(row)\n    row = this.combine(row)\n    row = this.slide(row)\n    return row\n  }\n\n  slide = (row: tRow): tRow => {\n    let arr = row.filter((val) => val.value)\n    const missing = 4 - arr.length\n    let zeros = Array(missing).fill(0)\n    zeros = zeros.map(() => new Tile(undefined))\n    arr = zeros.concat(arr)\n    return arr\n  }\n\n  combine = (row: tRow): tRow => {\n    for (let i = 3; i >= 1; i--) {\n      const a = row[i].value\n      const b = row[i - 1].value\n      if (a === b) {\n        row[i].value = a + b\n        row[i].combined = true\n        this.score += row[i].value\n        row[i - 1].value = 0\n      }\n    }\n    return row\n  }\n\n  move = (direction: string): this => {\n    this.prevBoard = cloneDeep(this.board)\n    let flipped = false\n    let rotated = false\n    let played = true\n\n    // reset tile new, combined, and position values\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        this.board[i][j].reset(i, j)\n      }\n    }\n\n    switch (direction) {\n      case 'up':\n        this.board = transposeGrid(this.board)\n        this.board = flipGrid(this.board)\n        rotated = true\n        flipped = true\n        break\n      case 'down':\n        this.board = transposeGrid(this.board)\n        rotated = true\n        break\n      case 'left':\n        this.board = flipGrid(this.board)\n        flipped = true\n        break\n      case 'right':\n        // no-op needed\n        break\n      default:\n        played = false\n    }\n\n    if (played) {\n      for (let i = 0; i < 4; i++) {\n        this.board[i] = this.operate(this.board[i])\n      }\n\n      if (flipped) {\n        this.board = flipGrid(this.board)\n      }\n      if (rotated) {\n        this.board = transposeGrid(this.board)\n      }\n    }\n\n    //set all tile curr positions\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        this.board[i][j].setCurrentPosition(i, j)\n      }\n    }\n\n    // add tile transition classes\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j].value) {\n          /* eslint-disable */\n          switch (direction) {\n            case 'up':\n              this.board[i][j].attr = `\n                ver-u-${this.board[i][j].prevRow - this.board[i][j].curRow} overlay\n              `\n              break\n            case 'down':\n              this.board[i][j].attr = `\n                ver-d-${this.board[i][j].curRow - this.board[i][j].prevRow} overlay\n              `\n              break\n            case 'left':\n              this.board[i][j].attr = `\n                hor-l-${this.board[i][j].prevCol - this.board[i][j].curCol} overlay\n              `\n              break\n            default:\n              this.board[i][j].attr = `\n                hor-r-${this.board[i][j].curCol - this.board[i][j].prevCol} overlay\n              `\n          }\n          /* eslint-enable */\n        }\n      }\n    }\n\n    // if board updated -> add new value\n    if (compare(this.board, this.prevBoard)) {\n      this.addNewValue()\n      this.isMoving = true\n    }\n\n    return this\n  }\n}\n","import React, { useState } from 'react'\nimport { useRecoilValue } from 'recoil'\nimport { ThemeState } from '../state/Atoms'\nimport Confetti from 'react-dom-confetti'\nimport '../styles/GameStatus.scss'\nimport { confettiConfig } from '../utils/Constants'\nimport { useEffect } from 'react'\n\ninterface GameStatusProps {\n  isGameWon: boolean\n  reset: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n  keepGoing: () => void\n  renderForLose: boolean\n}\n\nconst GameStatus: React.FC<GameStatusProps> = ({\n  isGameWon,\n  reset,\n  keepGoing,\n  renderForLose,\n}) => {\n  const theme = useRecoilValue(ThemeState)\n  const [gameWon, setGameWon] = useState(isGameWon)\n  const title = renderForLose ? 'Game Over!' : 'You Won!'\n  const btnText = renderForLose ? 'Try Again?' : 'Restart'\n\n  useEffect(() => {\n    setTimeout(() => {\n      // the confetti component only fires when active changes\n      // but this component only renders when the game is won\n      setGameWon(true)\n    }, 500)\n  }, [])\n\n  return (\n    <div className=\"game-won-container\">\n      <div className=\"game-won-container-box\">\n        <h3 className=\"game-won-container-text\">{title}</h3>\n        <div className=\"button-container\">\n          <div className={`game-won-btn game-won-btn-${theme}`} onClick={reset}>\n            <span className={`span-${theme}`}>{btnText}</span>\n          </div>\n\n          {!renderForLose && (\n            <>\n              <Confetti active={gameWon} config={confettiConfig} />\n\n              <div\n                className={`game-won-btn game-won-btn-${theme}`}\n                onClick={keepGoing}\n              >\n                <span className={`span-${theme}`}>Keep Going!</span>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default GameStatus\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from 'react'\nimport logo from '../logo.svg'\nimport { FiSettings } from 'react-icons/fi'\nimport { useRecoilState } from 'recoil'\nimport { ThemeState } from '../state/Atoms'\nimport { Divider, FormControl, NativeSelect, Popover } from '@material-ui/core'\nimport '../styles/Settings.scss'\nimport { BESTSCORE, GAMESTATE, THEME, ThemeType } from '../utils/Constants'\nimport packJson from '../../package.json'\nimport { GiMoonBats, GiUbisoftSun } from 'react-icons/gi'\n\nconst Settings: React.FC = () => {\n  const version = packJson['version']\n  const [theme, setTheme] = useRecoilState<ThemeType>(ThemeState)\n  const [anchorEl, setAnchorEl] = useState<Element | null | undefined>(null)\n\n  const [isCacheClear, setIsCacheClear] = useState(() => {\n    if (\n      localStorage.getItem(BESTSCORE) ||\n      localStorage.getItem(GAMESTATE) ||\n      localStorage.getItem(THEME)\n    ) {\n      return false\n    }\n    return true\n  })\n  const cacheClearText = isCacheClear ? 'Cache is Clear' : 'Clear Cache'\n\n  useEffect(() => {\n    localStorage.setItem(THEME, theme)\n  }, [theme])\n\n  const removeLocalStorage = (): void => {\n    localStorage.removeItem(THEME)\n    localStorage.removeItem(GAMESTATE)\n    localStorage.removeItem(BESTSCORE)\n    setIsCacheClear(true)\n  }\n\n  const setSelectedTheme = (\n    e: React.ChangeEvent<{ name?: string; value: unknown }>,\n  ): void => {\n    setTheme(e.target.value as ThemeType)\n  }\n\n  const getPopoverBody = (): React.ReactElement => {\n    return (\n      <div className={`popover-body popover-body-${theme}`}>\n        <div className=\"settings-item center\">\n          <h3 onClick={removeLocalStorage}>{cacheClearText}</h3>\n        </div>\n        <Divider />\n        <div className=\"settings-item\">\n          <h3>Theme:</h3>\n          <div className=\"center-item\">\n            {theme === ThemeType.DARK ? (\n              <GiMoonBats size=\"22px\" className=\"theme-icon\" />\n            ) : (\n              <GiUbisoftSun size=\"22px\" className=\"theme-icon\" />\n            )}\n            <FormControl className=\"no-decoration\">\n              <NativeSelect\n                value={theme}\n                className={`select-${theme}`}\n                onChange={setSelectedTheme}\n              >\n                {Object.values(ThemeType).map((type, idx) => {\n                  return (\n                    <option key={idx} value={type}>\n                      {type}\n                    </option>\n                  )\n                })}\n              </NativeSelect>\n            </FormControl>\n          </div>\n        </div>\n        <Divider />\n        <div className=\"settings-item\">\n          <h3>Version:</h3>\n          <h4 className=\"center-item\">{version}</h4>\n        </div>\n        <Divider />\n        <div className=\"settings-item \">\n          <h3>Made with:</h3>\n          <img src={logo} className=\"react-icon\" />\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div>\n        <FiSettings\n          id=\"settings-cog\"\n          className=\"settings-cog\"\n          size=\"30px\"\n          onClick={(e): void => setAnchorEl(e.currentTarget)}\n        />\n      </div>\n\n      {/* Popover component: hidden until above button click */}\n      <Popover\n        open={anchorEl !== null}\n        anchorEl={anchorEl}\n        onClose={(): void => setAnchorEl(null)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        {getPopoverBody()}\n      </Popover>\n    </>\n  )\n}\n\nexport default Settings\n","import React, { useEffect, useState } from 'react'\nimport './styles/App.scss'\nimport GameBoard from './components/GameBoard'\nimport GameHeader from './components/GameHeader'\nimport { BESTSCORE, GAMESTATE, ThemeType } from './utils/Constants'\nimport { initialScores, IScores } from './utils/Types'\nimport { Board } from './utils/Board'\nimport { useRecoilValue } from 'recoil'\nimport { ThemeState } from './state/Atoms'\nimport './styles/MobileStyle.scss'\nimport { useSwipeable } from 'react-swipeable'\nimport { isGameOver, isGameWon } from './utils/BoardUtils'\nimport GameStatus from './components/GameStatus'\nimport Settings from './components/Settings'\n\nconst App: React.FC = () => {\n  const theme = useRecoilValue<ThemeType>(ThemeState)\n\n  const [gameboard, setGameboard] = useState<Board>(() => {\n    const storedBoard = localStorage.getItem(GAMESTATE)\n    return storedBoard !== '' && storedBoard !== null\n      ? new Board(JSON.parse(storedBoard))\n      : new Board(undefined)\n  })\n  const [startGame, setStartGame] = useState<boolean>(gameboard.started)\n\n  const [scores, setScores] = useState<IScores>(() => {\n    const bs = localStorage.getItem(BESTSCORE)\n    return {\n      ...initialScores,\n      bestScore: !bs ? initialScores.bestScore : bs,\n    }\n  })\n\n  const swipeHandlers = useSwipeable({\n    onSwipedLeft: () => {\n      setGameboard({ ...gameboard.move('left') })\n    },\n    onSwipedUp: () => {\n      setGameboard({ ...gameboard.move('up') })\n    },\n    onSwipedRight: () => {\n      setGameboard({ ...gameboard.move('right') })\n    },\n    onSwipedDown: () => {\n      setGameboard({ ...gameboard.move('down') })\n    },\n  })\n  const useSwipeHandlers = startGame ? swipeHandlers : {}\n\n  useEffect(() => {\n    const setTileSizeOnResize = (): void => {\n      const tile = document.getElementById('board-tile')\n      const tileWidth = tile?.offsetWidth\n      const tileHeight = tile?.offsetHeight\n      if (tileWidth) {\n        document.documentElement.style.setProperty(\n          '--tile-width',\n          `${tileWidth}px`,\n        )\n        document.documentElement.style.setProperty(\n          '--tile-height',\n          `${tileHeight}px`,\n        )\n      }\n    }\n    window.addEventListener('resize', setTileSizeOnResize)\n    setTileSizeOnResize()\n    return (): void => {\n      window.removeEventListener('resize', setTileSizeOnResize)\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(GAMESTATE, JSON.stringify(gameboard))\n  }, [gameboard])\n\n  // initial start game\n  if (startGame && !gameboard?.started) {\n    setGameboard(gameboard.init())\n  }\n\n  const handleStartGame = (): void => {\n    if (startGame) {\n      // Reset the game\n      localStorage.removeItem(GAMESTATE)\n      setGameboard({ ...gameboard.clear() })\n      updateScores(0)\n      return\n    }\n    setStartGame(true)\n  }\n\n  const removeBestScore = (): void => {\n    const resp = window.confirm(\n      \"This will REMOVE your high-score, are you sure you'd like to continue?\",\n    )\n    if (resp) {\n      localStorage.removeItem(BESTSCORE)\n      setScores({ ...initialScores, score: scores.score })\n    }\n  }\n\n  const updateScores = (score: number): void => {\n    if (score > parseInt(scores.bestScore)) {\n      localStorage.setItem(BESTSCORE, score.toString())\n      setScores({ score: score, bestScore: score.toString() })\n      return\n    }\n    setScores({ ...scores, score: score })\n  }\n\n  return (\n    <div className={`App App-${theme}`}>\n      <Settings />\n\n      <div {...useSwipeHandlers} className=\"content-area\">\n        <div className=\"gameboard\">\n          {/*eslint-disable*/}\n          {((!gameboard.win && isGameWon(gameboard.board)) ||\n            (gameboard.lose && isGameOver(gameboard.board))) && (\n              <GameStatus\n                isGameWon={false}\n                reset={(): void => {\n                  handleStartGame()\n                }}\n                keepGoing={(): void => {\n                  setGameboard({ ...gameboard.setWin() })\n                }}\n                renderForLose={gameboard.lose}\n              />\n            )}\n          {/*eslint-enable*/}\n          <GameHeader\n            scores={scores}\n            startGame={startGame}\n            handleStartGame={handleStartGame}\n            removeBestScore={removeBestScore}\n          />\n\n          <GameBoard\n            gameboard={gameboard}\n            setGameboard={setGameboard}\n            startGame={startGame}\n            updateScore={updateScores}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { RecoilRoot } from 'recoil'\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}