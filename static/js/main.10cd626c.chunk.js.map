{"version":3,"sources":["utils/Constants.ts","logo.svg","utils/Tile.ts","utils/BoardUtils.ts","state/Atoms.ts","components/BoardTile.tsx","components/GameBoard.tsx","components/GameHeader.tsx","utils/Types.ts","utils/Board.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ThemeType","id","getInitialTile","Tile","value","curRow","curCol","prevRow","prevCol","combined","new","attr","clear","reset","i","j","setCurrentPosition","notNew","setNew","this","Math","random","BESTSCORE","DEFAULT_GAMEBOARD","CHOICE_ARR","CHOICE_ARR_LEN","length","THEME","flipGrid","grid","map","r","reverse","transposeGrid","newGrid","cloneDeep","ThemeState","atom","key","default","localStorage","getItem","LIGHT","DARK","BoardTile","tile","theme","useRecoilValue","colorClass","rValue","TWO","FOUR","EIGHT","SIXTEEN","THIRYTWO","SIXTYFOUR","ONETWENTYEIGHT","TWOFIFTYSIX","FIVETWELVE","TENTWENTYFOUR","TWENTYFORTYEIGHT","getColorId","newClass","combinedClass","className","GameBoard","gameboard","startGame","updateScore","setGameboard","gameWonRef","useRef","arrowKeyChecker","e","code","preventDefault","move","useEffect","document","addEventListener","removeEventListener","board","score","isGameOver","alert","current","isGameWon","row","rIdx","cIdx","GameHeader","scores","handleStartGame","removeBestScore","onClick","bestScore","initialScores","Board","prevBoard","win","lose","started","moved","isMoving","addNewValue","valIdx","floor","insertPointX","insertPointY","init","operate","slide","combine","arr","filter","val","missing","zeros","Array","fill","concat","a","b","direction","flipped","rotated","played","compare","App","useRecoilState","setTheme","useState","setStartGame","bs","setScores","swipeHandlers","useSwipeable","onSwipedLeft","onSwipedUp","onSwipedRight","onSwipedDown","useSwipeHandlers","setTileSizeOnResize","getElementById","tileWidth","offsetWidth","tileHeight","offsetHeight","documentElement","style","setProperty","window","setItem","updateScores","parseInt","toString","offHandleColor","onHandleColor","onColor","offColor","uncheckedIcon","size","checkedIcon","onChange","checked","src","logo","alt","confirm","removeItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.10cd626c.chunk.js","sourcesContent":["import { getInitialTile } from './Tile'\nimport { tBoard } from './Types'\n/**\n * CONSTANTS and Enums\n */\n\n// localstorage keys\nexport const BESTSCORE = 'bestScore'\n\n// initial gameboard\nexport const DEFAULT_GAMEBOARD: tBoard = [\n  [getInitialTile(), getInitialTile(), getInitialTile(), getInitialTile()],\n  [getInitialTile(), getInitialTile(), getInitialTile(), getInitialTile()],\n  [getInitialTile(), getInitialTile(), getInitialTile(), getInitialTile()],\n  [getInitialTile(), getInitialTile(), getInitialTile(), getInitialTile()],\n]\n\n// choice array is for randomizing where a new value will appear after a move is made\nexport const CHOICE_ARR: Array<number> = [\n  2, 4, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2,\n]\nexport const CHOICE_ARR_LEN = CHOICE_ARR.length\nexport const DEFAULT_ROW_LEN = 4\nexport const THEME = 'theme'\n\nexport enum ThemeType {\n  DARK = 'dark',\n  LIGHT = 'light',\n}\n\nexport enum id {\n  TWO = 'two',\n  FOUR = 'four',\n  EIGHT = 'eight',\n  SIXTEEN = 'sixteen',\n  THIRYTWO = 'thirty-two',\n  SIXTYFOUR = 'sixty-four',\n  ONETWENTYEIGHT = 'one-twenty-eight',\n  TWOFIFTYSIX = 'two-fifty-six',\n  FIVETWELVE = 'five-twelve',\n  TENTWENTYFOUR = 'ten-twenty-four',\n  TWENTYFORTYEIGHT = 'twenty-fourty-eight',\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const getInitialTile = (): Tile => new Tile()\n\nexport class Tile {\n  id: number\n  value: number\n  curRow: number\n  curCol: number\n  prevRow: number\n  prevCol: number\n  combined: boolean\n  new: boolean\n  attr: string\n\n  constructor() {\n    this.id = Math.random()\n    this.value = 0\n    this.curRow = -1\n    this.curCol = -1\n    this.prevRow = -1\n    this.prevCol = -1\n    this.combined = false\n    this.new = false\n    this.attr = ''\n  }\n\n  clear = (): this => {\n    this.value = 0\n    this.curRow = -1\n    this.curCol = -1\n    this.prevRow = -1\n    this.prevCol = -1\n    this.new = true\n    return this\n  }\n\n  reset = (i: number, j: number): this => {\n    this.prevCol = j\n    this.prevRow = i\n    this.curRow = i\n    this.curCol = j\n    this.new = false\n    this.combined = false\n    return this\n  }\n\n  setCurrentPosition = (i: number, j: number): this => {\n    this.curRow = i\n    this.curCol = j\n    return this\n  }\n\n  notNew = (): this => {\n    this.new = false\n    return this\n  }\n\n  setNew = (): this => {\n    this.new = true\n    return this\n  }\n}\n","import { tBoard } from './Types'\nimport { cloneDeep } from 'lodash'\nimport { DEFAULT_GAMEBOARD, id } from './Constants'\n\nexport const compare = (a: tBoard, b: tBoard): boolean => {\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (a[i][j].value !== b[i][j].value) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nexport const flipGrid = (grid: tBoard): tBoard => {\n  return grid.map((r) => r.reverse())\n}\n\nexport const transposeGrid = (grid: tBoard): tBoard => {\n  // prefers const error\n  // eslint-disable-next-line\n  let newGrid = cloneDeep(DEFAULT_GAMEBOARD);\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      newGrid[i][j] = grid[j][i]\n    }\n  }\n  return newGrid\n}\n\nexport const isGameWon = (board: tBoard): boolean => {\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (board[i][j].value === 2048) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nexport const isGameOver = (board: tBoard): boolean => {\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (board[i][j].value === 0) {\n        return false\n      }\n      if (i !== 3 && board[i][j].value === board[i + 1][j].value) {\n        return false\n      }\n      if (j !== 3 && board[i][j].value === board[i][j + 1].value) {\n        return false\n      }\n      if (i !== 0 && board[i][j].value === board[i - 1][j].value) {\n        return false\n      }\n      if (j !== 0 && board[i][j].value === board[i][j - 1].value) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nexport const getColorId = (rValue: number): string => {\n  switch (rValue) {\n    case 0:\n      return ''\n    case 2:\n      return id.TWO\n    case 4:\n      return id.FOUR\n    case 8:\n      return id.EIGHT\n    case 16:\n      return id.SIXTEEN\n    case 32:\n      return id.THIRYTWO\n    case 64:\n      return id.SIXTYFOUR\n    case 128:\n      return id.ONETWENTYEIGHT\n    case 256:\n      return id.TWOFIFTYSIX\n    case 512:\n      return id.FIVETWELVE\n    case 1024:\n      return id.TENTWENTYFOUR\n    case 2048:\n    default:\n      return id.TWENTYFORTYEIGHT\n  }\n}\n","import { THEME, ThemeType } from '../utils/Constants'\nimport { atom } from 'recoil'\n\nexport const getTheme = (): ThemeType => {\n  const t = localStorage.getItem(THEME)\n  return t === ThemeType.LIGHT ? ThemeType.LIGHT : ThemeType.DARK\n}\n\nexport const ThemeState = atom({\n  key: 'theme',\n  default: getTheme(),\n})\n","import React from 'react'\nimport { useRecoilValue } from 'recoil'\nimport { ThemeState } from '../state/Atoms'\nimport { getColorId } from '../utils/BoardUtils'\nimport '../styles/TileAnimations.scss'\nimport { Tile } from '../utils/Tile'\n\ninterface BoardTileProps {\n  tile: Tile\n}\n\nconst BoardTile: React.FC<BoardTileProps> = ({ tile }) => {\n  const theme = useRecoilValue(ThemeState)\n  const colorClass = getColorId(tile.value)\n  const newClass = tile.value !== 0 && tile.new ? 'new' : ''\n  const combinedClass = tile.combined ? 'combined' : ''\n\n  return (\n    <>\n      <div\n        key={`${tile.id}`}\n        id={`${colorClass ? `${colorClass}-${theme}` : 'board-tile'}`}\n        className={`board-tile board-tile-${theme} ${newClass} ${combinedClass} ${tile.attr} `}\n      >\n        <div className={`board-value `}>\n          {tile.value !== 0 ? tile.value : ''}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default BoardTile\n","import React, { useEffect, useRef } from 'react'\nimport '../styles/GameBoard.scss'\nimport { Board } from '../utils/Board'\nimport { isGameOver, isGameWon } from '../utils/BoardUtils'\nimport { useRecoilValue } from 'recoil'\nimport { ThemeState } from '../state/Atoms'\nimport '../styles/DarkTileStyles.scss'\nimport '../styles/LightTileStyles.scss'\nimport BoardTile from './BoardTile'\n\ninterface GameBoardProps {\n  gameboard: Board\n  startGame: boolean\n  updateScore: (score: number) => void\n  setGameboard: React.Dispatch<React.SetStateAction<Board>>\n}\n\nconst GameBoard: React.FC<GameBoardProps> = ({\n  gameboard,\n  startGame,\n  updateScore,\n  setGameboard,\n}) => {\n  const theme = useRecoilValue(ThemeState)\n  const gameWonRef = useRef(false)\n\n  const arrowKeyChecker = (e: KeyboardEvent): void => {\n    // block keypresses except refresh\n    if (e.code !== 'KeyR') {\n      e.preventDefault()\n    }\n\n    switch (e.code) {\n      case 'ArrowLeft':\n        setGameboard({ ...gameboard.move('left') })\n        break\n      case 'ArrowUp':\n        setGameboard({ ...gameboard.move('up') })\n        break\n      case 'ArrowRight':\n        setGameboard({ ...gameboard.move('right') })\n        break\n      case 'ArrowDown':\n        setGameboard({ ...gameboard.move('down') })\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (startGame === true) {\n      document.addEventListener('keydown', arrowKeyChecker)\n    }\n\n    return (): void => {\n      document.removeEventListener('keydown', arrowKeyChecker)\n    }\n    // eslint-disable-next-line\n  }, [startGame])\n\n  useEffect(() => {\n    const { board, score } = gameboard\n\n    if (score !== 0) {\n      updateScore(gameboard.score)\n    }\n\n    if (isGameOver(board)) {\n      alert('Game over')\n    }\n\n    if (!gameWonRef.current && isGameWon(board)) {\n      alert('You won!')\n      gameWonRef.current = true\n    }\n    // eslint-disable-next-line\n  }, [gameboard, gameboard.board, gameboard.score])\n\n  return (\n    <>\n      <div className={`gameboard-board gameboard-board-${theme}`}>\n        {gameboard?.board?.map((row, rIdx) => (\n          <div key={`${rIdx}-${Math.random()}`} className=\"gameboard-board-row\">\n            {row.map((r, cIdx) => {\n              return (\n                <div\n                  key={`${cIdx}-${Math.random()}`}\n                  className={`underlay underlay-${theme}`}\n                >\n                  <BoardTile tile={r} />\n                </div>\n              )\n            })}\n          </div>\n        ))}\n      </div>\n      <p>\n        <i>Use the arrow keys to combine tiles and get to 2048!</i>\n      </p>\n    </>\n  )\n}\n\nexport default GameBoard\n","import React from 'react'\nimport { IScores } from '../utils/Types'\nimport { useRecoilValue } from 'recoil'\nimport { ThemeState } from '../state/Atoms'\nimport '../styles/GameHeader.scss'\n\ninterface GameHeaderProps {\n  scores: IScores\n  startGame: boolean\n  handleStartGame: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n  removeBestScore: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n}\n\nconst GameHeader: React.FC<GameHeaderProps> = ({\n  scores,\n  startGame,\n  handleStartGame,\n  removeBestScore,\n}) => {\n  const theme = useRecoilValue(ThemeState)\n\n  return (\n    <div className=\"gameboard-header\">\n      <div className={`gameboard-header-c1 gameboard-header-c1-${theme}`}>\n        <h1>Twenty</h1>\n        <h1>Forty</h1>\n        <h1>Eight</h1>\n      </div>\n\n      <div className=\"gameboard-header-c2\">\n        <div className={`score score-${theme}`}>\n          <h4> Score </h4>\n          <h2>{scores.score}</h2>\n        </div>\n        <div className={`new-game new-game-${theme}`} onClick={handleStartGame}>\n          <span className={`span-${theme}`}>\n            {startGame ? 'Restart' : 'New Game'}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"gameboard-header-c3\">\n        <div className={`best-score best-score-${theme}`}>\n          <h4> Best Score</h4>\n          <h2>{scores.bestScore}</h2>\n        </div>\n        <div className={`clear clear-${theme}`} onClick={removeBestScore}>\n          <span className={`span-${theme}`}>Clear</span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default GameHeader\n","import { Tile } from './Tile'\n/**\n * Interfaces and Type declarations\n */\n\nexport type tBoard = Array<Array<Tile>>\nexport type tRow = Array<Tile>\nexport type direction = 'left' | 'right' | 'up' | 'down' | 'noop'\n\nexport interface IScores {\n  score: number\n  bestScore: string\n}\n\nexport const initialScores: IScores = {\n  score: 0,\n  bestScore: '0',\n}\n","import { cloneDeep } from 'lodash'\nimport { transposeGrid, flipGrid, compare } from './BoardUtils'\nimport {\n  CHOICE_ARR,\n  CHOICE_ARR_LEN,\n  DEFAULT_GAMEBOARD,\n  DEFAULT_ROW_LEN,\n} from './Constants'\nimport { Tile } from './Tile'\nimport { direction, tBoard, tRow } from './Types'\n\nexport class Board {\n  board: tBoard\n  prevBoard: tBoard\n  score: number\n  win: boolean\n  lose: boolean\n  started: boolean\n  moved: direction\n  isMoving: boolean\n\n  constructor() {\n    this.board = [...DEFAULT_GAMEBOARD]\n    this.prevBoard = [...DEFAULT_GAMEBOARD]\n    this.score = 0\n    this.win = false\n    this.lose = false\n    this.started = false\n    this.moved = 'noop'\n    this.isMoving = false\n  }\n\n  addNewValue = (): void => {\n    const valIdx = Math.floor(Math.random() * CHOICE_ARR_LEN)\n    const insertPointX = Math.floor(Math.random() * DEFAULT_ROW_LEN)\n    const insertPointY = Math.floor(Math.random() * DEFAULT_ROW_LEN)\n\n    if (this.board[insertPointX][insertPointY].value === 0) {\n      this.board[insertPointX][insertPointY].value = CHOICE_ARR[valIdx]\n      this.board[insertPointX][insertPointY].setNew()\n    } else {\n      this.addNewValue()\n    }\n  }\n\n  init = (): this => {\n    this.started = true\n    this.addNewValue()\n    return this\n  }\n\n  clear = (): this => {\n    this.board = this.board.map((r) => r.map(() => new Tile()))\n    this.score = 0\n    this.win = false\n    this.lose = false\n    return this.init()\n  }\n\n  operate = (row: tRow): tRow => {\n    row = this.slide(row)\n    row = this.combine(row)\n    row = this.slide(row)\n    return row\n  }\n\n  slide = (row: tRow): tRow => {\n    let arr = row.filter((val) => val.value)\n    const missing = 4 - arr.length\n    let zeros = Array(missing).fill(0)\n    zeros = zeros.map(() => new Tile())\n    arr = zeros.concat(arr)\n    return arr\n  }\n\n  combine = (row: tRow): tRow => {\n    for (let i = 3; i >= 1; i--) {\n      const a = row[i].value\n      const b = row[i - 1].value\n      if (a === b) {\n        row[i].value = a + b\n        row[i].combined = true\n        this.score += row[i].value\n        row[i - 1].value = 0\n      }\n    }\n    return row\n  }\n\n  move = (direction: string): this => {\n    this.prevBoard = cloneDeep(this.board)\n    let flipped = false\n    let rotated = false\n    let played = true\n\n    // reset tile new, combined, and position values\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        this.board[i][j].reset(i, j)\n      }\n    }\n\n    switch (direction) {\n      case 'up':\n        this.board = transposeGrid(this.board)\n        this.board = flipGrid(this.board)\n        rotated = true\n        flipped = true\n        break\n      case 'down':\n        this.board = transposeGrid(this.board)\n        rotated = true\n        break\n      case 'left':\n        this.board = flipGrid(this.board)\n        flipped = true\n        break\n      case 'right':\n        // no-op needed\n        break\n      default:\n        played = false\n    }\n\n    if (played) {\n      for (let i = 0; i < 4; i++) {\n        this.board[i] = this.operate(this.board[i])\n      }\n\n      if (flipped) {\n        this.board = flipGrid(this.board)\n      }\n      if (rotated) {\n        this.board = transposeGrid(this.board)\n      }\n    }\n\n    //set all tile curr positions\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        this.board[i][j].setCurrentPosition(i, j)\n      }\n    }\n\n    // add tile transition classes\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j].value) {\n          /* eslint-disable */\n          switch (direction) {\n            case 'up':\n              this.board[i][j].attr = `\n                ver-u-${this.board[i][j].prevRow - this.board[i][j].curRow} overlay\n              `\n              break\n            case 'down':\n              this.board[i][j].attr = `\n                ver-d-${this.board[i][j].curRow - this.board[i][j].prevRow} overlay\n              `\n              break\n            case 'left':\n              this.board[i][j].attr = `\n                hor-l-${this.board[i][j].prevCol - this.board[i][j].curCol} overlay\n              `\n              break\n            default:\n              this.board[i][j].attr = `\n                hor-r-${this.board[i][j].curCol - this.board[i][j].prevCol} overlay\n              `\n          }\n          /* eslint-enable */\n        }\n      }\n    }\n\n    // if board updated -> add new value\n    if (compare(this.board, this.prevBoard)) {\n      this.addNewValue()\n      this.isMoving = true\n    }\n\n    return this\n  }\n}\n","import React, { useEffect, useState } from 'react'\nimport logo from './logo.svg'\nimport './styles/App.scss'\nimport GameBoard from './components/GameBoard'\nimport GameHeader from './components/GameHeader'\nimport { BESTSCORE, THEME, ThemeType } from './utils/Constants'\nimport { initialScores, IScores } from './utils/Types'\nimport { Board } from './utils/Board'\nimport { useRecoilState } from 'recoil'\nimport { ThemeState } from './state/Atoms'\nimport Switch from 'react-switch'\nimport { GiMoonBats, GiUbisoftSun } from 'react-icons/gi'\nimport './styles/MobileStyle.scss'\nimport { useSwipeable } from 'react-swipeable'\n\nconst App: React.FC = () => {\n  const [theme, setTheme] = useRecoilState<ThemeType>(ThemeState)\n  const [gameboard, setGameboard] = useState<Board>(new Board())\n  const [startGame, setStartGame] = useState<boolean>(false)\n  const [scores, setScores] = useState<IScores>(() => {\n    const bs = localStorage.getItem(BESTSCORE)\n    return {\n      ...initialScores,\n      bestScore: !bs ? initialScores.bestScore : bs,\n    }\n  })\n  const swipeHandlers = useSwipeable({\n    onSwipedLeft: () => {\n      setGameboard({ ...gameboard.move('left') })\n    },\n    onSwipedUp: () => {\n      setGameboard({ ...gameboard.move('up') })\n    },\n    onSwipedRight: () => {\n      setGameboard({ ...gameboard.move('right') })\n    },\n    onSwipedDown: () => {\n      setGameboard({ ...gameboard.move('down') })\n    },\n  })\n  const useSwipeHandlers = startGame ? swipeHandlers : {}\n\n  useEffect(() => {\n    const setTileSizeOnResize = (): void => {\n      const tile = document.getElementById('board-tile')\n      const tileWidth = tile?.offsetWidth\n      const tileHeight = tile?.offsetHeight\n      if (tileWidth) {\n        document.documentElement.style.setProperty(\n          '--tile-width',\n          `${tileWidth}px`,\n        )\n        document.documentElement.style.setProperty(\n          '--tile-height',\n          `${tileHeight}px`,\n        )\n      }\n    }\n    window.addEventListener('resize', setTileSizeOnResize)\n    setTileSizeOnResize()\n    return (): void => {\n      window.removeEventListener('resize', setTileSizeOnResize)\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(THEME, theme)\n  }, [theme])\n\n  // initial start game\n  if (startGame && !gameboard?.started) {\n    setGameboard(gameboard.init())\n  }\n\n  const handleStartGame = (): void => {\n    if (startGame) {\n      // Reset the game\n      setGameboard({ ...gameboard.clear() })\n      updateScores(0)\n      return\n    }\n    setStartGame(true)\n  }\n\n  const removeBestScore = (): void => {\n    const resp = window.confirm(\n      \"This will REMOVE your high-score, are you sure you'd like to continue?\",\n    )\n    if (resp) {\n      localStorage.removeItem(BESTSCORE)\n      setScores({ ...initialScores, score: scores.score })\n    }\n  }\n\n  const updateScores = (score: number): void => {\n    if (score > parseInt(scores.bestScore)) {\n      localStorage.setItem(BESTSCORE, score.toString())\n      setScores({ score: score, bestScore: score.toString() })\n      return\n    }\n    setScores({ ...scores, score: score })\n  }\n\n  return (\n    <div className={`App App-${theme}`}>\n      <div>\n        <Switch\n          offHandleColor=\"#7e7e7e\"\n          onHandleColor=\"#fee8f5\"\n          onColor=\"#9e9491\"\n          offColor=\"#423d33\"\n          uncheckedIcon={<GiMoonBats size=\"22px\" className=\"switch-icon\" />}\n          checkedIcon={<GiUbisoftSun size=\"22px\" className=\"switch-icon\" />}\n          className=\"switch\"\n          onChange={(): void => {\n            setTheme(\n              theme === ThemeType.LIGHT ? ThemeType.DARK : ThemeType.LIGHT,\n            )\n          }}\n          checked={theme === ThemeType.LIGHT ? true : false}\n        />\n\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </div>\n\n      <div {...useSwipeHandlers} className=\"content-area\">\n        <div className=\"gameboard\">\n          <GameHeader\n            scores={scores}\n            startGame={startGame}\n            handleStartGame={handleStartGame}\n            removeBestScore={removeBestScore}\n          />\n\n          <GameBoard\n            gameboard={gameboard}\n            setGameboard={setGameboard}\n            startGame={startGame}\n            updateScore={updateScores}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { RecoilRoot } from 'recoil'\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}